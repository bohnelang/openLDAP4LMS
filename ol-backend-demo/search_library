#!/usr/bin/php -q
<?php

###############################################
# Openeldap skeleton backend in php 
# for searching data in a library system 
# and sending back to openldap
# 
# Andreas Bohne-Lang, 2020
#
# Copyright by CC0
#


function fillsomedummydata()
{

	$iamalibbrarysystem = array (
		0 => array( 	"libid" 	=> "501234", 
				"firstname" 	=> "Bob", 
				"surename" 	=> "Beethoven", 
				# Email Test
				"email1" 	=> "bob@beethoven.test", 
				"email2" 	=> "boboobo@university.test",
				# IDM Test
				"employeeType"	=> "Employee",
				"organizationalStatus" => "researcher",
				"expiredate"	=> date("Y")."1231235959Z",    // YYYYMMDDHHMMSSZ
				"gracelogins"	=> "0" 
				),
		1 => array( 	"libid" 	=> "501224", 
				"firstname" 	=> "Eve", 
				"surename" 	=> "Mysteri", 
				"employeeType"	=> "walk-in-user",
				"organizationalStatus" => "lecturer",
				"email1" 	=> "eve@myst.test",
				"expiredate"    => date("Y")."1231235959Z",   
                                "gracelogins"   => "0"
				),
		2 => array( 	"libid" 	=> "511234", 
				"firstname" 	=> "Alex", 
				"surename" 	=> "Smith", 
				"employeeType"	=> "Intern",
				"email1" 	=> "alex@desert.fake", 
				"organizationalStatus" => "undergraduate student",
				"email2" 	=> "alex@university.test",
				"plaintext_password"=> "24121970",
				"expiredate"    => date("Y")."1231235959Z",   
                                "gracelogins"   => "0"
				),
		);

	return $iamalibbrarysystem;
}

function parseFilterandgetattr($filter,$attr)
{
# Thunderbird: 	filter=(|(cn=mysteri*)(mail=mysteri*)(sn=mysteri*))
#		attr=cn commonname mail objectClass

	if (preg_match('/\('.$attr.'=[^\)]*\)/i', $filter, $matches)) {
		return $matches[0];
	} 

	return "";
}

function fetchdatefromlibrarysystem($filter,$basedn="")
{

	$return_records = array();

	####
	#### Here your implement your code that fetch data from library system
	####
	#### In $filter you get the openldap attribute what and where to search 
	#### e.g. cn=Smith or sn=Smith 
	#### 
	#### For beginning ignore the openldap attribute and take the search value only
	####
	#### For experts: You can implement complex searches but you need take care of parsing the filter
	####	if you get a filter like this (&(sn=Smith)(o=Bio*)) you need to implement the parsing and logic :)
	####	Have fun ...
	####
	#### Attention: the submitted filter is in lower case
	####

	$usersearch  = parseFilterandgetattr($filter,"sn");	

	$usersearch=stristr($usersearch,"=");						// Find String after first =

	
	$usersearch=substr($usersearch,1,-1); 					// Remove ) at end of string i
	 $usersearch=str_replace(array(";","'",'"',")","(","*","%","\\","+","/"),"",$usersearch);


											// I do this for my example here 
	#### Here ... fill the data from your libsystem into $returndata
	##
	## (...) YOUR CODE HERE
	##

	#### I take some dumy data
	$returndata = fillsomedummydata();

	# Here I select  the records that fits the search name.  Normally you already gets the records selected by your LMS
	foreach( $returndata as $datarecord ){ 										// For each data record I get in the array
		foreach($datarecord as $datarecord_key => $datarecord_value){ 						// I select the single items 
			if(  ($datarecord_key=="surename") && strcasecmp ($usersearch,$datarecord_value)==0 ){		// and compare the values 
				// ! Important - do a caseinsensitiv compare - filter search has only small letters
			 	$return_records[] = $datarecord; 							// If I found one - I add it to the return array
			}
		}
	}

	
			 
	return $return_records;
}

function mapandsenddatatoldap($data,$basedn)
{

	####
	#### Here you map the library data to the openldap schema
	#### Only use attributes from official schemas 
	#### See slapd what you include 
	#### Normally this attributes are necessary: 	
	####	core.schema e.g.	: https://github.com/openshift/openldap/blob/master/2.4.41/contrib/config/schema/core.schema
	####	cosine.schema		: https://github.com/openshift/openldap/blob/master/2.4.41/contrib/config/schema/cosine.schema
	####	inetorgperson.schema	: https://github.com/openshift/openldap/blob/master/2.4.41/contrib/config/schema/inetorgperson.schema
	####	officePerson		: http://www.yolinux.com/TUTORIALS/LinuxTutorialLDAP-GILSchemaExtension.html
	####	mozillaAddressBookEntry : https://developer.mozilla.org/en-US/docs/Mozilla/Thunderbird/LDAP_Support
	####    
	####	eduPerson		: https://github.com/REFEDS/eduperson/blob/master/schema/openldap/eduperson.ldif

	####	class person: Must: cn, sn // May: userPassword $ telephoneNumber $ seeAlso $ description	
	#### 	class organizationalPerson: May: title $ x121Address $ registeredAddress $ destinationIndicator $ preferredDeliveryMethod $ telexNumber $ teletexTerminalIdentifier $ telephoneNumber $ internationaliSDNNumber $ facsimileTelephoneNumber $ street $ postOfficeBox $ postalCode $ postalAddress $ physicalDeliveryOfficeName $ ou $ st $ l
	### 	class inetOrgPerson: MAY: audio $ businessCategory $ carLicense $ departmentNumber $ displayName $ employeeNumber $ employeeType $ givenName $ homePhone $ homePostalAddress $ initials $ jpegPhoto $ labeledURI $ mail $ manager $ mobile $ o $ pager $ photo $ roomNumber $ secretary $ uid $ userCertificate $ x500uniqueIdentifier $ preferredLanguage $ userSMIMECertificate $ userPKCS12
	###	class officePerson: MAY: c $ rdn $ otherFacsimiletelephoneNumber $ IPPhone $ comment $ reports $ conferenceInformation 
	### 	class mozillaAddressBookEntry: MAY: Custom1 $ Custom2 $ Custom3 $ Custom4 $  xmozillaNickname $ xmozillaSecondeMail $ xmozillausehtmlmail $ nsAIMid 
	
	### You need to map YOU data to the official ldap attributes:
	### 	E.g.: Your library system sends the attribute 'surename' back. Thus you map 'surename' to openldap attribute 'sn'
	###	'firstname' to 'givenName'
	###	'email1' to 'mail'
	###	'email2' to mail'
	###	'libid' to 'uid' 
	### 	and so on
	###
	###	Keep in mind some openldap schema attributed are *mandatory* !!!  
	###
	
	foreach($data as $ind => $val)
	{
		printf("dn: uid=%s,%s\n",$val['libid'], $basedn);
                printf("objectClass: top\n");
                printf("objectClass: person\n");
                printf("objectClass: organizationalPerson\n");
		printf("objectClass: inetOrgPerson\n");
                printf("objectClass: officePerson\n");
                printf("objectClass: mozillaAddressBookEntry\n");
		printf("objectClass: ndsLoginProperties\n");
		printf("uid: %s\n", $val['libid']);
                printf("ou: library\n");
                printf("departmentNumber: lms\n");
                printf("cn:: %s\n",base64_encode(sprintf("%s %s %s",isset($val['surename'])?$val['surename']:"",isset($val['firstname'])?$val['firstname']:"", $val['libid'])));
                printf("displayName:: %s\n",base64_encode(sprintf("%s %s %s",isset($val['surename'])?$val['surename']:"",isset($val['firstname'])?$val['firstname']:"", $val['libid'])));
                if( isset($val["surename"])     && ! empty($val["surename"]))   printf("sn:: %s\n",  base64_encode($val['surename'])); else printf("sn: %s\n", $val['libid']);
                if( isset($val["firstname"])    && ! empty($val["firstname"]))  printf("givenName:: %s\n", base64_encode($val['firstname']));

                if( isset($val["email1"])       && ! empty($val["email1"]))     printf("mail: %s\n", $val["email1"]);
                if( isset($val["email2"])       && ! empty($val["email2"]))     printf("xmozillasecondemail: %s\n", $val["email2"]);

                if( isset($val["plaintext_password"])   && ! empty($val["plaintext_password"])) printf("userPassword: {MD5}%s\n", md5($val["plaintext_password"]));

		if( isset($val["employeeType"]))  		printf("employeeType: %s\n", $val["employeeType"]);
		if( isset($val["organizationalStatus"]))  	printf("organizationalStatus: %s\n", $val["employeeType"]);

		if( isset($val["expiredate"]))  		printf("passwordExpirationTime: %s\n", $val["expiredate"]);
		if( isset($val["gracelogins"]))  		printf("loginGraceRemaining: %s\n", $val["gracelogins"]);

                printf("\n");
	
	}


}


function main()
{

	$log=false;

	$basedn=$filter="";

/*
These are some parameter coming by STDIN 

SEARCH
msgid: 2
suffix: dc=ldap,dc=lms,dc=library
base: dc=ldap,dc=lms,dc=library
scope: 2
deref: 0
sizelimit: 500
timelimit: 3600
filter: (sn=Mysteri)
attrsonly: 0
*/

	#### This demo use two of this set only.

        while ($line = fgets(STDIN)) {
		$tt=explode(":",trim($line));
		if(isset( $tt[0] )){ 
			$tag =  $tt[0];
			unset( $tt[0] );
			$value=implode("",$tt);
                	if( $tag=="base" ) $basedn=trim($value);
                	if( $tag=="filter" ) $filter=trim($value);
		}
        }
		
	

	$datafromlibsystem = fetchdatefromlibrarysystem($filter,$basedn);

	mapandsenddatatoldap($datafromlibsystem,$basedn);

	echo "RESULT\n";
	echo "code: 0\n";

	if( $log ) {
		$fp=fopen("/tmp/ol-lib-backend.log","w");
		fputs($fp,sprintf("base=%s filter=%s \n",$basedn,$filter));
		fputs($fp,"----------------------\n");
		fclose($fp);
	} 

}


##########################

/* 
# filter: (&(objectClass=*)(&(|(cn=*smith*)(givenName=*smith*)(sn=*smith*)(mozillaNickname=*smith*)(mail=*smith*)(mozillaSecondEmail=*smith*)(&(description=*smith*))(o=*smith*)(ou=*smith*)(title=*smith*)(?=undefined)(?=undefined))))
# filter: (&(objectClass=*)(|(cn=smith*)(mail=smith*)(sn=smith*)))




Run a test like this:

./search_library <<_EOF_
SEARCH
msgid: 2
suffix: dc=ldap,dc=lms,dc=library
base: dc=ldap,dc=lms,dc=library
scope: 2
deref: 0
sizelimit: 500
timelimit: 3600
filter: (&(objectClass=*)(&(|(cn=*smith*)(givenName=*smith*)(sn=*smith*)(mozillaNickname=*smith*)(mail=*smith*)(mozillaSecondEmail=*smith*)(&(description=*smith*))(o=*smith*)(ou=*smith*)(title=*smith*)(?=undefined)(?=undefined)))) 
attrsonly: 0
_EOF_

*/

main();

exit(0);

?>
